openapi: 3.0.3
info:
  title: Dynamic API Documentation
  version: 1.0.0
  description: API that enables dynamic database and model access through URL patterns
paths:
  /api/v1/{database}/{model}/:
    get:
      operationId: v1_retrieve
      description: Retrieve a list of objects from the specified database and model.
      summary: List objects
      parameters:
      - in: path
        name: database
        schema:
          type: string
        required: true
      - in: path
        name: model
        schema:
          type: string
        required: true
      tags:
      - Dynamic API
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_create
      description: Create a new object in the specified database and model.
      summary: Create object
      parameters:
      - in: path
        name: database
        schema:
          type: string
        required: true
      - in: path
        name: model
        schema:
          type: string
        required: true
      tags:
      - Dynamic API
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '201':
          description: No response body
  /api/v1/{database}/{model}/{id}/:
    get:
      operationId: v1_retrieve_2
      description: Retrieve a specific object by ID from the specified database and
        model.
      summary: Get object
      parameters:
      - in: path
        name: database
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: model
        schema:
          type: string
        required: true
      tags:
      - Dynamic API
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_update
      description: Update all fields of a specific object in the specified database
        and model.
      summary: Update object
      parameters:
      - in: path
        name: database
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: model
        schema:
          type: string
        required: true
      tags:
      - Dynamic API
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: v1_partial_update
      description: Update specific fields of an object in the specified database and
        model.
      summary: Partial update object
      parameters:
      - in: path
        name: database
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: model
        schema:
          type: string
        required: true
      tags:
      - Dynamic API
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_destroy
      description: Delete a specific object from the specified database and model.
      summary: Delete object
      parameters:
      - in: path
        name: database
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: model
        schema:
          type: string
        required: true
      tags:
      - Dynamic API
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/token/:
    post:
      operationId: v1_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/token/refresh/:
    post:
      operationId: v1_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/token/verify/:
    post:
      operationId: v1_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
- url: http://localhost:8000
  description: Local Development Server
